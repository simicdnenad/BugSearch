add_definitions(-DSIMPLE_LOG -DCHECK_TIME -DMULTI_THREAD)

INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/include)
if (UNIX)
FILE(GLOB SRC_FILES "${CMAKE_PROJECT_NAME}Linux.cpp")
ENDIF()
if (WIN32)
FILE(GLOB SRC_FILES "${CMAKE_PROJECT_NAME}Win.cpp")
ENDIF()
#SET_TARGET_PROPERTIES(BugceLib PROPERTIES ARCHIVE_OUTPUT_DIRECTORY 
#                      ${PROJECT_SOURCE_DIR}/lib)

if (UNIX)
SET(EXECUTABLE_NAME "${CMAKE_PROJECT_NAME}Linux")
ADD_EXECUTABLE (${EXECUTABLE_NAME} ${SRC_FILES})
add_library(${EXECUTABLE_NAME}_lib STATIC ${SRC_FILES})
TARGET_LINK_LIBRARIES (${EXECUTABLE_NAME} LINK_PUBLIC pthread boost_program_options)
TARGET_LINK_LIBRARIES (${EXECUTABLE_NAME}_lib LINK_PUBLIC pthread boost_program_options)
ENDIF()
if (WIN32)
	SET(EXECUTABLE_NAME "${CMAKE_PROJECT_NAME}Win")
	link_directories($ENV{BOOST_ROOT}/stage/lib)
	set(Boost_USE_STATIC_LIBS ON) 
	set(Boost_USE_MULTITHREADED ON)  
	set(Boost_USE_STATIC_RUNTIME OFF) 
	find_package(Boost
	1.65.1 REQUIRED							# Fail with error if Boost is not found
	COMPONENTS filesystem program_options	# Boost libraries by their canonical name
	)  
	if(Boost_FOUND)
		ADD_EXECUTABLE (${EXECUTABLE_NAME} ${SRC_FILES})
		ADD_LIBRART(${EXECUTABLE_NAME}_lib STATIC ${SRC_FILES})
		TARGET_LINK_LIBRARIES (${EXECUTABLE_NAME} LINK_PUBLIC libboost_program_options-vc141-mt-gd-1_65_1)
		TARGET_LINK_LIBRARIES (${EXECUTABLE_NAME}_lib LINK_PUBLIC libboost_program_options-vc141-mt-gd-1_65_1)
	ENDIF()
ENDIF(WIN32)

SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY
    ${PROJECT_SOURCE_DIR}/bin)

